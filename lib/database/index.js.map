{"version":3,"sources":["../../src/database/index.js"],"names":["fs","require","kp","promisify","FuzzySearch","readFile","Kdbx","Credentials","ProtectedValue","Consts","ByteUtils","Database","path","_path","_db","_defaultGroup","password","then","load","data","buffer","fromString","db","getDefaultGroup","save","writeFile","Uint8Array","entry","id","Error","Entry","dbEntry","createEntry","uuid","updateEntry","_fromDbEntry","_getDbEntry","keywords","dbEntries","entries","fuzzySearch","caseSensitive","search","map","fields","Title","title","icon","URL","url","UserName","userName","Password","entryOrId","remove","DatabaseDumper","dump","find","undefined","getText","_dumpHeader","_dumpMeta","_dumpGroup","header","console","log","versionMajor","versionMinor","_find","CompressionAlgorithm","compression","CipherId","dataCipherUuid","keyEncryptionRounds","CrsAlgorithm","crsAlgorithm","meta","generator","level","group","indent","repeat","name","customIcon","notes","groups","forEach","_dumpEntry","Notes","where","what","Object","keys","key","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["// *** See examples of usage at the bottom ***\n\nconst fs = require('fs');\nconst kp = require('kdbxweb');\nconst promisify = require('es6-promisify');\nconst FuzzySearch = require('fuzzy-search');\n\nconst readFile = promisify(fs.readFile);\nconst Kdbx = kp.Kdbx;\nconst Credentials = kp.Credentials;\nconst ProtectedValue = kp.ProtectedValue;\nconst Consts = kp.Consts;\nconst ByteUtils = kp.ByteUtils;\n\nclass Database {\n\tconstructor(path) {\n\t\tthis._path = path;\n\t\tthis._db = null;\n\t\tthis._defaultGroup = null;\n\t}\n\n\t/**\n \t * @return a Promise which resolves to the Database when the file is open\n\t */\n\topen(password) {\n\t\treturn readFile(this._path)\n\t\t\t.then(data =>\n\t\t\t\tKdbx.load(\n\t\t\t\t\tdata.buffer,\n\t\t\t\t\tnew Credentials(ProtectedValue.fromString(password)),\n\t\t\t\t),\n\t\t\t)\n\t\t\t.then(db => {\n\t\t\t\tthis._db = db;\n\t\t\t\tthis._defaultGroup = db.getDefaultGroup();\n\t\t\t})\n\t\t\t.then(() => this);\n\t}\n\n\t/**\n\t * Save database to its file\n\t * @return a Promise which resolves to the Database when the file is saved\n\t */\n\tsave() {\n\t\treturn this._db\n\t\t\t.save()\n\t\t\t.then(data => fs.writeFile(this._path, new Uint8Array(data)))\n\t\t\t.then(() => this);\n\t}\n\n\t/**\n\t * @param an Entry or a raw Object describing the informed fields\n\t * @return the newly created Entry (with its id informed)\n\t * @throws if the entry already exists (it has its id field set)\n\t */\n\taddEntry(entry) {\n\t\tif (entry.id != null) {\n\t\t\tthrow new Error(\n\t\t\t\t`Trying to add an already existing entry: ${entry.id}`,\n\t\t\t);\n\t\t}\n\n\t\t// Clone entry (this coerces Objects and duplicates Entry's)\n\t\tentry = new Entry(entry);\n\n\t\tconst dbEntry = this._db.createEntry(this._defaultGroup);\n\t\tentry.id = dbEntry.uuid;\n\n\t\tthis.updateEntry(entry);\n\n\t\treturn entry;\n\t}\n\n\t/**\n\t * Get entry by id\n\t * @return the Entry\n\t * @throws if the entry does not exist\n\t */\n\tgetEntry(id) {\n\t\treturn Entry._fromDbEntry(this._getDbEntry(id));\n\t}\n\n\t/**\n\t * Find all entries matching keywords. If keywords is null or '', all entries\n\t * are returned.\n\t * @return an array of Entry objects\n\t */\n\tfindEntries(keywords = '') {\n\t\tvar dbEntries;\n\n\t\tif (keywords == null || keywords == '') {\n\t\t\tdbEntries = this._defaultGroup.entries;\n\t\t} else {\n\t\t\tconst fuzzySearch = new FuzzySearch(\n\t\t\t\tthis._defaultGroup.entries,\n\t\t\t\t['fields.Title', 'fields.URL', 'fields.UserName'],\n\t\t\t\t{\n\t\t\t\t\tcaseSensitive: false,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tdbEntries = fuzzySearch.search(keywords);\n\t\t}\n\n\t\treturn dbEntries.map(dbEntry => Entry._fromDbEntry(dbEntry));\n\t}\n\n\t/**\n   *\n\t * @throws if the entry does not exist\n\t */\n\tupdateEntry(entry) {\n\t\tif (entry.id == null) {\n\t\t\tthrow new Error('Trying to update an entry with no id');\n\t\t}\n\n\t\tvar dbEntry = this._getDbEntry(entry.id);\n\n\t\tdbEntry.fields.Title = entry.title;\n\t\tdbEntry.icon = entry.icon;\n\t\tdbEntry.fields.URL = entry.url;\n\t\tdbEntry.fields.UserName = entry.userName;\n\t\tdbEntry.fields.Password = ProtectedValue.fromString(entry.password);\n\t}\n\n\t/**\n\t * Deletes an existing entry given the Entry or its id\n\t * @throws if the entry does not exist\n\t */\n\tdeleteEntry(entryOrId) {\n\t\tvar id = entryOrId.id || entryOrId;\n\n\t\tthis._db.remove(this._getDbEntry(id));\n\t}\n\n\tdump() {\n\t\tnew DatabaseDumper(this._db).dump();\n\t}\n\n\t/**\n\t * @throws if the entry does not exist\n\t */\n\t_getDbEntry(uuid) {\n\t\tconst dbEntry = this._defaultGroup.entries.find(\n\t\t\tentry => entry.uuid.id == uuid,\n\t\t);\n\n\t\tif (dbEntry === undefined) {\n\t\t\tthrow new Error(`Entry not found: ${uuid}`);\n\t\t}\n\n\t\treturn dbEntry;\n\t}\n}\n\nclass Entry {\n\tstatic _fromDbEntry(dbEntry) {\n\t\treturn new Entry({\n\t\t\tid: dbEntry.uuid,\n\t\t\ttitle: dbEntry.fields.Title,\n\t\t\ticon: dbEntry.icon,\n\t\t\turl: dbEntry.fields.URL,\n\t\t\tuserName: dbEntry.fields.UserName,\n\t\t\tpassword: dbEntry.fields.Password.getText(),\n\t\t});\n\t}\n\n\tconstructor(\n\t\t{\n\t\t\tid = null,\n\t\t\ttitle = '',\n\t\t\ticon = 0,\n\t\t\turl = '',\n\t\t\tuserName = '',\n\t\t\tpassword = '',\n\t\t} = {},\n\t) {\n\t\tthis.id = id;\n\t\tthis.title = title;\n\t\tthis.icon = icon;\n\t\tthis.url = url;\n\t\tthis.userName = userName;\n\t\tthis.password = password;\n\t}\n}\n\nclass DatabaseDumper {\n\tconstructor(db) {\n\t\tthis._db = db;\n\t}\n\n\tdump() {\n\t\tthis._dumpHeader();\n\t\tthis._dumpMeta();\n\t\tthis._dumpGroup(0, this._db.getDefaultGroup());\n\t}\n\n\t_dumpHeader() {\n\t\tconst header = this._db.header;\n\t\tconsole.log(this._db);\n\t\tconsole.log('# Header:');\n\t\tconsole.log(\n\t\t\t'  Version:',\n\t\t\t`${header.versionMajor}.${header.versionMinor}`,\n\t\t);\n\t\tconsole.log(\n\t\t\t'  Compression:',\n\t\t\tthis._find(Consts.CompressionAlgorithm, header.compression),\n\t\t);\n\t\tconsole.log(\n\t\t\t'  Cipher:',\n\t\t\tthis._find(Consts.CipherId, header.dataCipherUuid),\n\t\t);\n\t\tconsole.log('  Encryption rounds:', `${header.keyEncryptionRounds}`);\n\t\tconsole.log(\n\t\t\t'  Stream cipher:',\n\t\t\tthis._find(Consts.CrsAlgorithm, header.crsAlgorithm),\n\t\t);\n\t}\n\n\t_dumpMeta() {\n\t\tconst meta = this._db.meta;\n\n\t\tconsole.log('# Meta:');\n\t\tconsole.log('  Generator:', `${meta.generator}`);\n\t}\n\n\t_dumpGroup(level, group) {\n\t\tlet indent = level == 0 ? '' : ' '.repeat(level * 2);\n\n\t\tconsole.log(indent + `* Group '${group.name}':`);\n\t\tconsole.log(indent + '    Id:', `${group.id}`);\n\t\tconsole.log(indent + '    Icon:', `${group.icon}`);\n\t\tconsole.log(indent + '    Custom icon:', `${group.customIcon}`);\n\t\tconsole.log(indent + '    Notes:', `${group.notes}`);\n\n\t\tgroup.groups.forEach(group => this._dumpGroup(level + 1, group));\n\t\tgroup.entries.forEach(entry => this._dumpEntry(level + 1, entry));\n\t}\n\n\t_dumpEntry(level, entry) {\n\t\tlet indent = level == 0 ? '' : ' '.repeat(level * 2);\n\n\t\tconsole.log(indent + `· Entry '${entry.fields.Title}':`);\n\t\tconsole.log(indent + '    Id:', `${entry.id}`);\n\t\tconsole.log(indent + '    Icon:', `${entry.icon}`);\n\t\tconsole.log(indent + '    Custom icon:', `${entry.customIcon}`);\n\t\tconsole.log(indent + '    Notes:', `${entry.fields.Notes}`);\n\t\tconsole.log(indent + '    URL:', `${entry.fields.URL}`);\n\t\tconsole.log(indent + '    User name:', `${entry.fields.UserName}`);\n\t\tconsole.log(\n\t\t\tindent + '    Password:',\n\t\t\t`${entry.fields.Password.getText()}`,\n\t\t);\n\t}\n\n\t_find(where, what) {\n\t\treturn Object.keys(where).find(key => where[key] == what);\n\t}\n}\n\nmodule.exports = {\n\tDatabase: Database,\n\tEntry: Entry,\n};\n\n// Usage examples:\n\n// *** Open database\n// var db = new Database('sample-keepass-db.kdbx');\n// db.open('password').then(() => ...);\n\n// *** Create an entry\n// db.addEntry({\n// \ttitle: 'My entry',\n// \tuserName: 'me',\n// \tpassword: 'secret',\n// \turl: 'https://www.google.com',\n// });\n\n// *** Get an entry\n// var entry = db.getEntry('Bkxzh2wTW6YNhqoOeYUzww==');\n\n// *** Delete an entry\n// db.deleteEntry('Bkxzh2wTW6YNhqoOeYUzww==');\n\n// *** Update an entry\n// var entry = db.getEntry('BokXdYe/rFGWfAKxk/Y27A==');\n// entry.title = 'New title';\n// db.updateEntry(entry);\n\n// *** Get all entries\n// var entries = db.findEntries();\n\n// *** Search entries containing 'google' in the title, user or URL\n// var entries = db.findEntries('google');\n"]}